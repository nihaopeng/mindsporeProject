# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] Default_wrapper.1
# In file /home/pyt/PycharmProjects/pythonProject/net2.py:23/    def construct(self, x):/
funcgraph fg_1(
        %para1 : Tensor(F32)[16, 3, 227, 227]    # x
        , %para2 : Ref[Tensor(F32)][10]    # fc3.bias
        , %para3 : Ref[Tensor(F32)][10, 84]    # fc3.weight
        , %para4 : Ref[Tensor(F32)][84]    # fc2.bias
        , %para5 : Ref[Tensor(F32)][84, 120]    # fc2.weight
        , %para6 : Ref[Tensor(F32)][120]    # fc1.bias
        , %para7 : Ref[Tensor(F32)][120, 400]    # fc1.weight
        , %para8 : Ref[Tensor(F32)][16, 6, 5, 5]    # conv2.weight
        , %para9 : Ref[Tensor(F32)][6, 3, 5, 5]    # conv1.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_6(%para1)    #(Tensor(F32)[16, 3, 227, 227])    # fg_6=Default.6 #scope: Default
#[CNode]11
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:43/        return x/#[CNode]12
}
# order:
#   1: @Default_wrapper.1:[CNode]11{[0]: ValueNode<FuncGraph> Default.6, [1]: x}
#   2: @Default_wrapper.1:[CNode]12{[0]: ValueNode<Primitive> Return, [1]: [CNode]11}


# [No.2] Default.6
# In file /home/pyt/PycharmProjects/pythonProject/net2.py:23/    def construct(self, x):/
funcgraph fg_6[fg_1](
        %para10 : Tensor(F32)[16, 3, 227, 227]    # x
    ) {
    %1 : Tensor(F32)[16, 6, 223, 223] = FuncGraph::fg_13(%para10)    #(Tensor(F32)[16, 3, 227, 227])    # fg_13=Conv2d.13 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:28/        x = self.pool (self.relu (self.conv1 (x)))/#[CNode]14
    %2 : Tensor(F32)[16, 6, 223, 223] = FuncGraph::fg_15(%1)    #(Tensor(F32)[16, 6, 223, 223])    # fg_15=ReLU.15 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:28/        x = self.pool (self.relu (self.conv1 (x)))/#[CNode]16
    %3 : Tensor(F32)[16, 6, 111, 111] = FuncGraph::fg_17(%2)    #(Tensor(F32)[16, 6, 223, 223])    # fg_17=MaxPool2d.17 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:28/        x = self.pool (self.relu (self.conv1 (x)))/#x
    %4 : Tensor(F32)[16, 16, 107, 107] = FuncGraph::fg_18(%3)    #(Tensor(F32)[16, 6, 111, 111])    # fg_18=Conv2d.18 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:33/        x = self.pool (self.relu (self.conv2 (x)))/#[CNode]19
    %5 : Tensor(F32)[16, 16, 107, 107] = FuncGraph::fg_15(%4)    #(Tensor(F32)[16, 16, 107, 107])    # fg_15=ReLU.15 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:33/        x = self.pool (self.relu (self.conv2 (x)))/#[CNode]20
    %6 : Tensor(F32)[16, 16, 53, 53] = FuncGraph::fg_17(%5)    #(Tensor(F32)[16, 16, 107, 107])    # fg_17=MaxPool2d.17 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:33/        x = self.pool (self.relu (self.conv2 (x)))/#x
    %7 : Tensor(F32)[16, 44944] = FuncGraph::fg_21(%6)    #(Tensor(F32)[16, 16, 53, 53])    # fg_21=Flatten.21 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:35/        x=self.flatten(x)/#x

#------------------------> 1
    %8 = FuncGraph::fg_7(%7)    #(Tensor(F32)[16, 44944])    # fg_7=Dense.7 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:37/        x = self.relu (self.fc1 (x))/#[CNode]22
    %9 = FuncGraph::fg_15(%8)    #(Undefined)    # fg_15=ReLU.15 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:37/        x = self.relu (self.fc1 (x))/#x
    %10 = FuncGraph::fg_23(%9)    #(Undefined)    # fg_23=Dense.23 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:39/        x = self.relu (self.fc2 (x))/#[CNode]24
    %11 = FuncGraph::fg_15(%10)    #(Undefined)    # fg_15=ReLU.15 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:39/        x = self.relu (self.fc2 (x))/#x
    %12 = FuncGraph::fg_25(%11)    #(Undefined)    # fg_25=Dense.25 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:42/        x = self.fc3 (x)/#x
    Primitive::Return{prim_type=1}(%12)    #(Undefined) #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:43/        return x/#[CNode]26
}
# order:
#   1: @Default.6:[CNode]14{[0]: ValueNode<FuncGraph> Conv2d.13, [1]: x}
#   2: @Default.6:[CNode]16{[0]: ValueNode<FuncGraph> ReLU.15, [1]: [CNode]14}
#   3: @Default.6:x{[0]: ValueNode<FuncGraph> MaxPool2d.17, [1]: [CNode]16}
#   4: @Default.6:[CNode]19{[0]: ValueNode<FuncGraph> Conv2d.18, [1]: x}
#   5: @Default.6:[CNode]20{[0]: ValueNode<FuncGraph> ReLU.15, [1]: [CNode]19}
#   6: @Default.6:x{[0]: ValueNode<FuncGraph> MaxPool2d.17, [1]: [CNode]20}
#   7: @Default.6:x{[0]: ValueNode<FuncGraph> Flatten.21, [1]: x}
#   8: @Default.6:[CNode]22{[0]: ValueNode<FuncGraph> Dense.7, [1]: x}
#   9: @Default.6:x{[0]: ValueNode<FuncGraph> ReLU.15, [1]: [CNode]22}
#  10: @Default.6:[CNode]24{[0]: ValueNode<FuncGraph> Dense.23, [1]: x}
#  11: @Default.6:x{[0]: ValueNode<FuncGraph> ReLU.15, [1]: [CNode]24}
#  12: @Default.6:x{[0]: ValueNode<FuncGraph> Dense.25, [1]: x}
#  13: @Default.6:[CNode]26{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.3] Dense.7
# In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:463/    def construct(self, x):/
funcgraph fg_7[fg_1](
        %para11 : Tensor(F32)[16, 44944]    # x
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_8(%para11, %para6, %para7)    #(Tensor(F32)[16, 44944], Ref[Tensor(F32)][120], Ref[Tensor(F32)][120, 400])    # fg_8=L-Dense.8 #scope: Default
#[CNode]27
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc1-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#[CNode]28
}
# order:
#   1: @Dense.7:[CNode]27{[0]: ValueNode<FuncGraph> L-Dense.8, [1]: x, [2]: fc1.bias, [3]: fc1.weight}
#   2: @Dense.7:[CNode]28{[0]: ValueNode<Primitive> Return, [1]: [CNode]27}


# [No.4] L-Dense.8
# In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:463/    def construct(self, x):/
funcgraph fg_8(
        %para12 : Tensor(F32)[16, 44944]    # x
        , %para13 : Ref[Tensor(F32)][120]    # L-fc3.bias
        , %para14 : Ref[Tensor(F32)][120, 400]    # L-fc3.weight
    ) {
    %1 : Tuple[I64*2]TupleShape(NoShape, NoShape) = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para12)    #(Tensor(F32)[16, 44944]) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:473/        if len(x_shape) != 2:/#фx_shape
    %2 : NoneTypeNoShape = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1, "Dense")    #(Tuple[I64*2]TupleShape(NoShape, NoShape), StringNoShape) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:465/        check_dense_input_shape(x_shape, self.cls_name)/#29
    %3 : NoneTypeNoShape = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneTypeNoShape) #scope: Default/fc3-Dense
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:42/        x = self.fc3 (x)/#30
    %4 : I64NoShape = FuncGraph::fg_31(%1)    #(Tuple[I64*2]TupleShape(NoShape, NoShape))    # fg_31=L-ms_len.31 #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#32
    %5 : BoolNoShape = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64NoShape, I64NoShape) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#33
    %6 : BoolNoShape = FuncGraph::fg_34(%5)    #(BoolNoShape)    # fg_34=L-bool_.34 #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#35
    %7 : FuncNoShape = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_36, FuncGraph::fg_37)    #(BoolNoShape, FuncNoShape, FuncNoShape)    # fg_36=L-✓Dense.36, fg_37=L-✗Dense.37 #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#38
    %8 : Tensor(F32)[16, 44944] = %7() #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#39

#------------------------> 3
    %9 = FuncGraph::fg_9(%8)    #(Tensor(F32)[16, 44944])    # fg_9=L-↓Dense.9 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:42/        x = self.fc3 (x)/#40
    %10 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%9, %3)    #(Undefined, NoneTypeNoShape) #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:42/        x = self.fc3 (x)/#41
    Primitive::Return{prim_type=1}(%10)    #(Undefined) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/#[CNode]42
}
# order:
#   1: @L-Dense.8:фx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: @L-Dense.8:29{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: фx_shape, [2]: ValueNode<StringImm> Dense}
#   3: @L-Dense.8:32{[0]: ValueNode<FuncGraph> L-ms_len.31, [1]: фx_shape}
#   4: @L-Dense.8:33{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 32, [2]: ValueNode<Int64Imm> 2}
#   5: @L-Dense.8:35{[0]: ValueNode<FuncGraph> L-bool_.34, [1]: 33}
#   6: @L-Dense.8:38{[0]: ValueNode<Primitive> Switch, [1]: 35, [2]: ValueNode<FuncGraph> L-✓Dense.36, [3]: ValueNode<FuncGraph> L-✗Dense.37}
#   7: @L-Dense.8:39{[0]: 38}
#   8: @L-Dense.8:40{[0]: ValueNode<FuncGraph> L-↓Dense.9, [1]: 39}
#   9: @L-Dense.8:41{[0]: ValueNode<Primitive> Depend, [1]: 40, [2]: 30}
#  10: @L-Dense.8:[CNode]42{[0]: ValueNode<Primitive> Return, [1]: 41}


# [No.5] L-↓Dense.9
# In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:466/        if len(x_shape) != 2:/
funcgraph fg_9[fg_8](
        %para15 : Tensor(F32)[16, 44944]    # фx
    ) {
    %1 : BoolNoShape = FuncGraph::fg_34(Bool(1))    #(BoolNoShape)    # fg_34=L-bool_.34 #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/#43
    %2 : FuncNoShape = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_10, FuncGraph::fg_44)    #(BoolNoShape, FuncNoShape, FuncNoShape)    # fg_10=L-✓↓Dense.10, fg_44=L-✗↓Dense.44 #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/#45

#------------------------> 4
    %3 = %2() #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/#46
    %4 = FuncGraph::fg_47(%3)    #(Undefined)    # fg_47=L-↓↓Dense.47 #scope: Default
      # In file /home/pyt/PycharmProjects/pythonProject/net2.py:42/        x = self.fc3 (x)/#48
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/#49
}
# order:
#   1: @L-↓Dense.9:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: фx, [2]: L-fc3.weight}
#   2: @L-↓Dense.9:43{[0]: ValueNode<FuncGraph> L-bool_.34, [1]: ValueNode<BoolImm> true}
#   3: @L-↓Dense.9:45{[0]: ValueNode<Primitive> Switch, [1]: 43, [2]: ValueNode<FuncGraph> L-✓↓Dense.10, [3]: ValueNode<FuncGraph> L-✗↓Dense.44}
#   4: @L-↓Dense.9:46{[0]: 45}
#   5: @L-↓Dense.9:48{[0]: ValueNode<FuncGraph> L-↓↓Dense.47, [1]: 46}
#   6: @L-↓Dense.9:49{[0]: ValueNode<Primitive> Return, [1]: 48}


# [No.6] L-✓↓Dense.10
# In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/
funcgraph fg_10[fg_9](
) {

#------------------------> 5
    %1 = $(L-↓Dense.9):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%para15, %para14)    #(Tensor(F32)[16, 44944], Ref[Tensor(F32)][120, 400]) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:468/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%1, %para13)    #(Undefined, Ref[Tensor(F32)][120]) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:470/            x = self.bias_add(x, self.bias)/#x
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/fc3-Dense
      # In file /home/pyt/miniconda3/envs/mindspore_py37/lib/python3.7/site-packages/mindspore/nn/layer/basic.py:469/        if self.has_bias:/#50
}
# order:
#   1: @L-✓↓Dense.10:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-fc3.bias}
#   2: @L-✓↓Dense.10:50{[0]: ValueNode<Primitive> Return, [1]: x}


#===============================================================================
# num of function graphs in stack: 6/7 (Ignored 1 internal frames).
